services:
  postgres:
    container_name: postgres
    image: saveliy950/postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./database:/docker-entrypoint-initdb.d
      - postgres:/var/lib/postgresql/data
    networks:
      - taxi_provider

  eureka-server:
    container_name: eureka-server
    image: saveliy950/eureka-server
    ports:
      - "8761:8761"
    networks:
      - taxi_provider

  api-gateway:
    container_name: api-gateway
    image: saveliy950/api-gateway
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8765:8765"
    depends_on:
      - eureka-server
    networks:
      - taxi_provider

  passenger-service:
    container_name: passenger-service
    image: saveliy950/passenger-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/passengers_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  driver-service:
    container_name: driver-service
    image: saveliy950/driver-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/drivers_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  ride-service:
    container_name: ride-service
    image: saveliy950/ride-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/rides_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  rating-service:
    container_name: rating-service
    image: saveliy950/rating-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ratings_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  prometheus:
    image: saveliy950/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - taxi_provider

  grafana:
    image: saveliy950/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - taxi_provider

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command:
      - start-dev
      - --import-realm
    ports:
      - "8180:8080"
    volumes:
      - keycloak:/opt/keycloak/data/import/
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin

  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elastic-search:/usr/share/elasticsearch/data/
      - ./elasticsearch.yaml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
    networks:
      - taxi_provider

  logstash:
    image: logstash:7.9.1
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash.yaml:/usr/share/logstash/config/logstash.yml
      - logstash:/var/lib/logstash/data
    networks:
      - taxi_provider
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:7.9.1
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./kibana.yaml:/usr/share/kibana/config/kibana.yml
      - kibana:/usr/share/kibana/data
    networks:
      - taxi_provider
    depends_on:
      - elasticsearch

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - 9411:9411
    networks:
      - taxi_provider

  master:
    image: redis:latest
    command: redis-server --requirepass "123456"
    networks:
      - taxi_provider

  slave:
    image: redis:latest
    command: redis-server --slaveof master 6379
    depends_on:
      - master
    networks:
      - taxi_provider

  sentinel:
    build: sentinel
    environment:
      - SENTINEL_QUORUM=2
      - SENTINEL_DOWN_AFTER=5000
      - SENTINEL_FAILOVER=10000
    user: redis
    depends_on:
      - master
      - slave
    networks:
      - taxi_provider

  redis-node-1:
    image: redis:latest
    ports:
      - "7001:6379"
    volumes:
      - ./redis/node-1:/data
    command: [ "redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes" ]
    networks:
      - taxi_provider

  redis-node-2:
    image: redis:latest
    ports:
      - "7002:6379"
    volumes:
      - ./redis/node-2:/data
    command: [ "redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes" ]
    networks:
      - taxi_provider

  redis-node-3:
    image: redis:latest
    ports:
      - "7003:6379"
    volumes:
      - ./redis/node-3:/data
    command: [ "redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes" ]
    networks:
      - taxi_provider

  redis-node-4:
    image: redis:latest
    ports:
      - "7004:6379"
    volumes:
      - ./redis/node-4:/data
    command: [ "redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes" ]
    networks:
      - taxi_provider

  redis-node-5:
    image: redis:latest
    ports:
      - "7005:6379"
    volumes:
      - ./redis/node-5:/data
    command: [ "redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes" ]
    networks:
      - taxi_provider

  redis-node-6:
    image: redis:latest
    ports:
      - "7006:6379"
    volumes:
      - ./redis/node-6:/data
    command: [ "redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000", "--appendonly", "yes" ]
    networks:
      - taxi_provider

  redis-cli:
    image: redis:latest
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    entrypoint: [ "/bin/sh", "-c", "sleep 5; redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1 --cluster-yes" ]
    networks:
      - taxi_provider

volumes:
  kibana:
  logstash:
  elastic-search:
  keycloak:
  postgres:
    driver: local

networks:
  taxi_provider:
    driver: bridge