services:
  postgres:
    container_name: postgres
    image: saveliy950/postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./database:/docker-entrypoint-initdb.d
      - postgres:/var/lib/postgresql/data
    networks:
      - taxi_provider

  eureka-server:
    container_name: eureka-server
    image: saveliy950/eureka-server
    ports:
      - "8761:8761"
    networks:
      - taxi_provider

  api-gateway:
    container_name: api-gateway
    image: saveliy950/api-gateway
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8765:8765"
    depends_on:
      - eureka-server
    networks:
      - taxi_provider

  passenger-service:
    container_name: passenger-service
    image: saveliy950/passenger-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/passengers_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  driver-service:
    container_name: driver-service
    image: saveliy950/driver-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/drivers_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  ride-service:
    container_name: ride-service
    image: saveliy950/ride-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/rides_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  rating-service:
    container_name: rating-service
    image: saveliy950/rating-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ratings_db
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - taxi_provider

  prometheus:
    image: saveliy950/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - taxi_provider

  grafana:
    image: saveliy950/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - taxi_provider

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command:
      - start-dev
      - --import-realm
    ports:
      - "8180:8180"
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: skademon
      KC_HTTP_PORT: 8180
      KC_HOSTNAME_URL: http://localhost:8180
      KC_HOSTNAME_ADMIN_URL: http://localhost:8180
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    healthcheck:
      test: [ 'CMD-SHELL',
              '[ -f /tmp/HealthCheck.java ] || 
              echo "public class HealthCheck { 
              public static void main(String[] args) throws java.lang.Throwable { 
                System.exit(java.net.HttpURLConnection.HTTP_OK 
                == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java 
                /tmp/HealthCheck.java http://localhost:8180/auth/health/live' ]
      interval: 5s
      timeout: 5s
      retries: 20
volumes:
  postgres:
    driver: local

networks:
  taxi_provider:
    driver: bridge